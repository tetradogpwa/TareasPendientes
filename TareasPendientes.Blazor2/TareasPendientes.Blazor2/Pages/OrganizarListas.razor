@page "/Organizar/Listas"
@inject IJSRuntime JS
<h2>Organizar Listas</h2>
@if (Data.Listas.Count > 0)
{
    <div class="Eliminar-Listas">
        <h3>Eliminar Listas</h3>
        <ul>
            @for (int i = 0; i < Data.Listas.Count; i++)
            {
                <li @ondblclick="@(() => PreguntarSiQuiereBorrarLista(Data.Listas.GetValueAt(i)))" @onclick="@(() => ListaActual = Data.Listas.GetValueAt(i))">@Data.Listas.GetValueAt(i).ToString()</li>
            }
        </ul>
        @if (ListaActual != null)
        {
            <h3>Editar Lista:@ListaActual.ToString()</h3>

            <h4>Tareas</h4>
            <ul>
                @foreach (var tarea in ListaActual)
                {
                    <li class="@(ListaActual.Tareas.Contains(tarea) ? "Lista-Actual" : "Lista-Heredada")" @onclick="@(() => PreguntarPorTarea(tarea))">@tarea.ToString()</li>
                }
            </ul>
            <h4>Categorias</h4>
            <div class="Lista-Categorias">
                <h5>Estan en la lista</h5>
                <ul class="Lista-Categorias-Estan">
                    @for (int i = 0; i < Data.Categorias.Count; i++)
                    {
                        if (Data.Categorias.GetValueAt(i).Listas.Contains(ListaActual) && Data.Categorias.GetValueAt(i).Id != 0)
                        {
                            <li @onclick="@(() => PreguntarSiQuiereQuitarLaCategoria(Data.Categorias.GetValueAt(i)))">@Data.Categorias.GetValueAt(i).ToString()</li>
                        }
                    }
                </ul>
                <h5>Disponibles</h5>
                <ul class="Lista-Categorias-NoEstan">

                    @for (int i = 0; i < Data.Categorias.Count; i++)
                    {
                        if (!Data.Categorias.GetValueAt(i).Listas.Contains(ListaActual) && Data.Categorias.GetKey(i)!= 0)
                        {
                            <li @onclick="@(() => Data.Categorias.GetValueAt(i).Listas.Add(ListaActual))">@Data.Categorias.GetValueAt(i).ToString()</li>
                        }
                    }
                </ul>
            </div>
        }
        else
        {
            <h3>No hay lista seleccionada</h3>
        }

    </div> 
}
else
{
    <h3>No hay lista</h3>
}
@code {
    [CascadingParameter] Data Data { get; set; }
    Lista ListaActual = null;
    async Task PreguntarSiQuiereQuitarLaCategoria(Categoria categoria)
    {
        if (await JS.PreguntaAsync($"Quieres eliminar la categoria {categoria.ToString()} de la lista {ListaActual.ToString()}?"))
        {
            categoria.Listas.Remove(ListaActual);
        }
    }
    async Task PreguntarSiQuiereBorrarLista(Lista lista)
    {
        IList<Tarea> tareas;
        Lista lst;
        if (await JS.PreguntaAsync($"Quieres eliminar la lista {lista.ToString()}?"))
        {
            Data.Listas.Remove(lista);
            tareas = lista.Tareas.GetValues();
            for(int i=0;i<Data.Listas.Count;i++)
            {
                lst = Data.Listas.GetValueAt(i);
                if (lst.ListasHerencia.Contains(lista))
                {

                    lst.ListasHerencia.Remove(lista);
                    for (int j = 0; j < tareas.Count; j++)
                    {
                        if (lst.TareasHechas.ContainsKey(tareas[j].Id))
                            lst.TareasHechas.Remove(tareas[j].Id);
                    }
                    lst.TareasOcultas.RemoveRange(tareas);

                }
            }
            ListaActual = null;
        }
    }
    async Task PreguntarPorTarea(Tarea tarea)
    {
        if (ListaActual.Tareas.Contains(tarea))
        {
            if (await JS.PreguntaAsync($"Quieres eliminar la tarea {tarea.ToString()}?"))
            {
                ListaActual.Tareas.Remove(tarea);
            }
        }
        else if (!ListaActual.TareasOcultas.Contains(tarea))
        {
            ListaActual.TareasOcultas.Add(tarea);
        }
    }

}
